package com.fintracker.in;

import com.fintracker.core.models.Transaction;
import com.fintracker.core.models.TransactionType;
import com.fintracker.out.AnalyticsService;
import com.fintracker.core.services.BudgetService;
import com.fintracker.core.services.GoalService;
import com.fintracker.core.services.TransactionService;
import com.fintracker.out.NotificationService;

import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

public class TransactionConsoleHandler {
    private final TransactionService transactionService;
    private final BudgetService budgetService;
    private final GoalService goalService;
    private final AnalyticsService analyticsService;
    private final NotificationService notificationService;

    public TransactionConsoleHandler(TransactionService transactionService, BudgetService budgetService, GoalService goalService, AnalyticsService analyticsService, NotificationService notificationService) {
        this.transactionService = transactionService;
        this.budgetService = budgetService;
        this.goalService = goalService;
        this.analyticsService = analyticsService;
        this.notificationService = notificationService;
    }

    Scanner scanner = new Scanner(System.in);

    private void handleSetBudget() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞: ");
        double amount = Double.parseDouble(scanner.nextLine());
        budgetService.setBudget(amount);
    }

    private void handleSetGoal() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å: ");
        double amount = Double.parseDouble(scanner.nextLine());
        goalService.setGoal(amount);
    }

    private void handleCheckGoal() {
        double remaining = goalService.getRemainingAmount();
        if (remaining <= 0) {
            System.out.println("–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏! üéâ");
        } else {
            System.out.println("–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: " + remaining);
        }
    }

    private void handleAddTransaction() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ");
        double amount = Double.parseDouble(scanner.nextLine());
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ");
        String category = scanner.nextLine();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ì–ì–ì–ì-–ú–ú-–î–î: ");
        LocalDate date = LocalDate.parse(scanner.nextLine());
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ");
        String description = scanner.nextLine();
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø INCOME/EXPENSE: ");
        TransactionType type = TransactionType.valueOf(scanner.nextLine().toUpperCase());
        Transaction transaction = new Transaction(amount, category, date, description, type);
        transactionService.createTransaction(transaction);
        System.out.println("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    private void handleEditTransaction() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: ");
        String id = scanner.nextLine();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É: ");
        double amount = Double.parseDouble(scanner.nextLine());
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ");
        String category = scanner.nextLine();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ì–ì–ì–ì-–ú–ú-–î–î: ");
        LocalDate date = LocalDate.parse(scanner.nextLine());
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ");
        String description = scanner.nextLine();
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø INCOME/EXPENSE: ");
        TransactionType type = TransactionType.valueOf(scanner.nextLine().toUpperCase());
        Transaction transaction = new Transaction(amount, category, date, description, type);
        transactionService.editTransaction(id, transaction);
        System.out.println("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
    }

    private void handleDeleteTransaction() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        String id = scanner.nextLine();
        if (transactionService.deleteTransaction(id)) {
            System.out.println("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!");
        } else {
            System.out.println("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        }
    }

    private void handleListTransaction() {
        System.out.println("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ");
        for (Transaction transaction : transactionService.listTransactions()) {
            System.out.println(transaction);
        }
    }

    private void handleGenerateReport() {
        analyticsService.generateReport();
    }

    private void handleNotifications() {
        System.out.println("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:");
        List<String> notifications = notificationService.getNotifications();
        if (notifications.isEmpty()) {
            System.out.println("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
        } else {
            notifications.forEach(System.out::println);
        }
    }


    public void start() {
        while (true) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É(setBudget,set_goal,check_goal, add, edit, delete, list,generate_report,notification, exit): ");
            String command = scanner.nextLine().trim().toLowerCase();
            switch (command) {
                case "set_budget":
                    handleSetBudget();
                    break;
                case "set_goal":
                    handleSetGoal();
                    break;
                case "check_goal":
                    handleCheckGoal();
                    break;
                case "add":
                    handleAddTransaction();
                    break;
                case "edit":
                    handleEditTransaction();
                    break;
                case "delete":
                    handleDeleteTransaction();
                    break;
                case "list":
                    handleListTransaction();
                    break;
                case "generate_report":
                    handleGenerateReport();
                    break;
                case "notifications":
                    handleNotifications();
                    break;
                case "exit":
                    System.out.println("–í—ã—Ö–æ–¥...");
                    return;
                default:
                    System.out.println("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
            }
        }
    }

}
